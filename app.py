import streamlit as st
import openai

# Configura√ß√£o da chave de API de forma segura
openai.api_key = api_key

# Dicion√°rio de estados e suas sub-regi√µes
subregioes_por_estado = {
    'Acre': ['Alto Acre', 'Baixo Acre', 'Purus', 'Juru√°'],
    'Alagoas': ['Leste Alagoano', 'Agreste Alagoano', 'Sert√£o Alagoano'],
    'Amap√°': ['Macap√°', 'Santana', 'Oiapoque', 'Mazag√£o'],
    'Amazonas': ['Manaus', 'Parintins', 'Itacoatiara', 'Tef√©', 'Coari'],
    'Bahia': ['Rec√¥ncavo', 'Zona da Mata', 'Agreste', 'Sert√£o', 'Extremo Oeste'],
    'Cear√°': ['Litoral Oeste', 'Litoral Leste', 'Sert√£o Central', 'Inhamuns', 'Cariri'],
    'Distrito Federal': ['Bras√≠lia', 'Taguatinga', 'Ceil√¢ndia', 'Planaltina'],
    'Esp√≠rito Santo': ['Litoral Norte', 'Central Serrana', 'Central Sul', 'Capara√≥'],
    'Goi√°s': ['Norte Goiano', 'Leste Goiano', 'Sul Goiano', 'Centro Goiano'],
    'Maranh√£o': ['Norte Maranhense', 'Oeste Maranhense', 'Leste Maranhense', 'Centro Maranhense', 'Sul Maranhense'],
    'Mato Grosso': ['Norte Mato-Grossense', 'Nordeste Mato-Grossense', 'Centro-Sul Mato-Grossense', 'Sudoeste Mato-Grossense'],
    'Mato Grosso do Sul': ['Pantanais Sul-Mato-Grossenses', 'Centro Norte', 'Sudoeste', 'Leste'],
    'Minas Gerais': ['Tri√¢ngulo Mineiro', 'Zona da Mata', 'Sul/Sudoeste de Minas', 'Central Mineira', 'Norte de Minas', 'Jequitinhonha/Mucuri'],
    'Par√°': ['Baixo Amazonas', 'Maraj√≥', 'Metropolitana de Bel√©m', 'Nordeste Paraense', 'Sudeste Paraense', 'Sudoeste Paraense'],
    'Para√≠ba': ['Mata Paraibana', 'Agreste Paraibano', 'Borborema', 'Sert√£o Paraibano'],
    'Paran√°': ['Norte Pioneiro', 'Campos Gerais', 'Oeste Paranaense', 'Sudoeste Paranaense', 'Regi√£o Metropolitana de Curitiba'],
    'Pernambuco': ['Regi√£o Metropolitana do Recife', 'Zona da Mata', 'Agreste', 'Sert√£o Pernambucano'],
    'Piau√≠': ['Norte Piauiense', 'Centro-Norte Piauiense', 'Sudeste Piauiense', 'Sudoeste Piauiense'],
    'Rio de Janeiro': ['Regi√£o Metropolitana', 'Baixada Fluminense', 'Sul Fluminense', 'Norte Fluminense', 'Regi√£o dos Lagos', 'Serrana'],
    'Rio Grande do Norte': ['Leste Potiguar', 'Agreste Potiguar', 'Central Potiguar', 'Oeste Potiguar'],
    'Rio Grande do Sul': ['Regi√£o Metropolitana de Porto Alegre', 'Serra Ga√∫cha', 'Norte Ga√∫cho', 'Sul Ga√∫cho', 'Campanha Ga√∫cha', 'Litoral'],
    'Rond√¥nia': ['Madeira-Guapor√©', 'Vale do Jamari', 'Zona da Mata', 'Vale do Guapor√©'],
    'Roraima': ['Norte de Roraima', 'Sul de Roraima'],
    'Santa Catarina': ['Grande Florian√≥polis', 'Norte Catarinense', 'Vale do Itaja√≠', 'Serrana', 'Oeste Catarinense', 'Sul Catarinense'],
    'S√£o Paulo': ['Regi√£o Metropolitana de S√£o Paulo', 'Vale do Para√≠ba', 'Litoral Paulista', 'Campinas', 'Sorocaba', 'Bauru', 'Ara√ßatuba', 'Presidente Prudente', 'Ribeir√£o Preto', 'S√£o Jos√© do Rio Preto'],
    'Sergipe': ['Leste Sergipano', 'Agreste Sergipano', 'Sert√£o Sergipano'],
    'Tocantins': ['Ocidental do Tocantins', 'Oriental do Tocantins'],
}

# Fun√ß√£o para gerar a descri√ß√£o da persona com foco nos aspectos sociais, antropol√≥gicos e psicol√≥gicos gerais
def gerar_descricao(estado, subregiao, classe_social, contexto, genero, idade):
    prompt = (
        f"Fa√ßa uma an√°lise de uma pessoa do g√™nero {genero.lower()}, com {int(idade)} anos, pertencente √† classe {classe_social}, "
        f"que vive em um contexto {contexto}, na sub-regi√£o {subregiao}, no estado de {estado}, no Brasil, com o objetivo de ajudar um terapeuta lacaniano "
        f"a entender essa pessoa. A an√°lise deve focar em influ√™ncias socioculturais, antropol√≥gicas, hist√≥ricas e psicol√≥gicas predominantes da regi√£o. "
        f"Considere como o meio social pode impor certos valores e comportamentos e como isso pode influenciar caracter√≠sticas psicol√≥gicas dessa pessoa. "
        f"Destaque aspectos como poss√≠veis desafios sociais, din√¢micas de poder, acesso a recursos e como a coloniza√ß√£o e o contexto hist√≥rico moldaram a sociedade. "
        f"N√£o inclua hist√≥rias pessoais espec√≠ficas, mas sim uma an√°lise geral das influ√™ncias culturais e psicol√≥gicas mais comuns para essa persona. "
        f"Evite estere√≥tipos e generaliza√ß√µes excessivas, mantendo o foco em caracter√≠sticas socioculturais predominantes."
    )

    # Chamada √† API da OpenAI para gerar a descri√ß√£o com base no prompt
    response = openai.chat.completions.create(
        model="gpt-4",  # Altere para gpt-3.5-turbo se necess√°rio
        messages=[{"role": "user", "content": prompt}],
        max_tokens=800,
        temperature=0.7,
    )

    descricao = response.choices[0].message.content.strip()
    return descricao

# Fun√ß√£o para simular como a persona reagiria em uma situa√ß√£o espec√≠fica
def obter_reacao_da_persona(descricao_persona, situacao):
    prompt = (
        f"Com base na seguinte descri√ß√£o de uma pessoa:\n\n"
        f"{descricao_persona}\n\n"
        f"Descreva como essa pessoa reagiria na seguinte situa√ß√£o:\n\n"
        f"Situa√ß√£o: {situacao}\n\n"
        f"Considere os tra√ßos de personalidade, o contexto cultural, hist√≥rico e as influ√™ncias sociais e psicol√≥gicas da regi√£o. Evite estere√≥tipos."
    )

    # Chamada √† API da OpenAI para gerar a rea√ß√£o da persona com base na descri√ß√£o e situa√ß√£o
    response = openai.chat.completions.create(
        model="gpt-4",  # Altere para gpt-3.5-turbo se necess√°rio
        messages=[{"role": "user", "content": prompt}],
        max_tokens=800,
        temperature=0.7,
    )

    reacao = response.choices[0].message.content.strip()
    return reacao


# Fun√ß√£o para atualizar as sub-regi√µes com base no estado selecionado
def get_subregioes(estado):
    return subregioes_por_estado.get(estado, [])

# Inicializa o estado da sess√£o para armazenar a descri√ß√£o
if 'descricao' not in st.session_state:
    st.session_state['descricao'] = ''

# T√≠tulo da Aplica√ß√£o
st.title("üß† Simulador de Persona" )

# Se√ß√£o de sele√ß√£o de par√¢metros para a cria√ß√£o da persona
st.header("Configura√ß√£o da Persona")

# Estado (com base em um dicion√°rio de estados j√° existente)
estado = st.selectbox('Selecione o estado:', list(subregioes_por_estado.keys()))

# Sub-regi√£o do estado escolhido
subregiao = st.selectbox('Selecione a sub-regi√£o:', get_subregioes(estado))

# Escolha da classe social da persona
classe_social = st.selectbox('Selecione a classe social:', ['baixa', 'm√©dia', 'alta'])

# Contexto (urbano ou rural)
contexto = st.selectbox('Selecione o contexto:', ['urbano', 'rural'])

# G√™nero da persona
genero = st.selectbox('Selecione o g√™nero:', ['Masculino', 'Feminino', 'Outro'])

# Idade da persona
idade = st.number_input('Insira a idade da persona:', min_value=1, max_value=120, value=30)

# Gera√ß√£o da descri√ß√£o da persona ao clicar no bot√£o
if st.button("Gerar Descri√ß√£o da Persona"):
    with st.spinner('Gerando descri√ß√£o...'):
        descricao = gerar_descricao(estado, subregiao, classe_social, contexto, genero, idade)
        st.session_state['descricao'] = descricao  # Armazena a descri√ß√£o na sess√£o
        st.subheader("Descri√ß√£o da Persona")
        st.write(descricao)

# Verifica√ß√£o se a descri√ß√£o j√° foi gerada para permitir a intera√ß√£o
if st.session_state['descricao']:
    st.header("Interagir com a Persona")

    # Entrada de situa√ß√£o para simula√ß√£o de como a persona reagiria
    situacao = st.text_input("Descreva uma situa√ß√£o para a persona:")

    # Simula√ß√£o da rea√ß√£o da persona √† situa√ß√£o fornecida
    if st.button('Simular Rea√ß√£o da Persona'):
        if situacao.strip() != '':
            with st.spinner('Gerando rea√ß√£o...'):
                reacao = obter_reacao_da_persona(st.session_state['descricao'], situacao)
                st.subheader("Rea√ß√£o da Persona")
                st.write(reacao)
        else:
            st.warning("Por favor, insira uma situa√ß√£o.")
